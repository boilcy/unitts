export interface UnifiedTTSAudio {
  /**
   * Unique identifier for this audio response.
   */
  id: string;

  /**
   * Base64 encoded audio bytes generated by the model, in the format specified in
   * the request.
   */
  data: string;

  /**
   * The model used to generate the audio.
   */
  model?: string;

  /**
   * The object type, which is always `tts.audio`.
   */
  object: 'tts.audio';

  /**
   * Metadata about the audio chunk.
   */
  metadata?: Record<string, any>;

  /**
   * Whether this is the final chunk of the audio response. Useful in streaming mode.
   */
  final: boolean;

  /**
   * The original response from the model.
   */
  originalResponse?: any;
}

export interface UnifiedTTSAudioChunk {
  /**
   * Unique identifier for this audio response.
   */
  id: string;

  /**
   * Base64 encoded audio bytes generated by the model, in the format specified in
   * the request.
   */
  data: string;

  /**
   * The model used to generate the audio.
   */
  model?: string;

  /**
   * The object type, which is always `tts.audio.chunk`.
   */
  object: 'tts.audio.chunk';

  /**
   * Metadata about the audio chunk.
   */
  metadata?: Record<string, any>;

  /**
   * Whether this is the final chunk of the audio response. Useful in streaming mode.
   */
  final: boolean;

  /**
   * The original response from the model.
   */
  originalResponse?: any;
}

/**
 * for incremental mode
 */
export interface UnifiedTTSTextChunk {
  text: string;
}

import type { MinimaxTTSParams } from '../clients/minimax/minimaxTypes';
import type { TencentTTSParams } from '../clients/tencent/tencentTypes';

export interface ProviderExtraParams {
  minimax: Partial<MinimaxTTSParams>;
  tencent: Partial<TencentTTSParams>;
}

export type ProviderName = keyof ProviderExtraParams;

export interface UnifiedTTSParams<TProvider extends ProviderName = any> {
  text: string;
  model?: string;
  voice?: string;
  pitch?: number;
  emotion?: string;
  rate?: number;
  volume?: number;
  /** 音频格式 */
  format?: 'mp3' | 'wav' | 'pcm' | 'opus' | 'ogg' | 'm4a' | 'flac';
  /** 采样率 */
  sampleRate?: number;
  /** 是否流式输出 */
  stream?: boolean;

  /**
   * Provider特定的额外参数
   * 允许用户传入任何TTS服务商特有的参数
   * 这些参数会被直接传递给对应的参数适配器处理
   */
  extra?: TProvider extends ProviderName ? ProviderExtraParams[TProvider] : Record<string, any>;
}

export type UnifiedTTSParamsWithoutText<TProvider extends ProviderName = any> = Omit<
  UnifiedTTSParams<TProvider>,
  'text'
>;

export interface UnifiedTTSParamsStreaming<TProvider extends ProviderName = any>
  extends UnifiedTTSParams<TProvider> {
  stream: true;
}

export interface UnifiedTTSParamsNonStreaming<TProvider extends ProviderName = any>
  extends UnifiedTTSParams<TProvider> {
  stream: false;
}

export interface UnifiedTTSOptions {
  /** The maximum time to wait for a response in milliseconds. */
  timeout?: number;
  /** The number of times to retry the request. Defaults to 2. */
  maxRetries?: number;
  /** A hook to abort the request. */
  signal?: AbortSignal;
  /** Additional headers to include in the request. */
  headers?: Record<string, string>;
}
